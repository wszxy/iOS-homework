说明：这是第一次计算器的作业。因为刚接触OC还不到一个月，所以很多东西都不懂，再加上也没有任何的编程经验，所以这次作业可能会显得简陋，尤其是UI上。

为了方便作业的检查，我在这里大致地介绍一下我的思路以及这个项目的结构。

程序设计：
         前提条件————仅考虑了四个一、二级双目算术运算符，小数点，0-9十个数字，前、后圆括号，以及等于号。
         
         算法实现————模拟人类计算多项式的过程，从左向右进行计算，每遇到左括号便将该括号之前的计算数据贮存，然后去计算括号里面的数据，等遇到右括号便                     把该对括号里面的计算结果写成一个运算数，继续回到在遇到这一对括号之前时的运算。在没有括号的情况下，计算器每当获得三个操作数和两个                     运算符的时候便使用其中两个操作数和一个运算符进行一次计算，把计算结果覆盖到原来的两个操作数中的一个，并将另一个操作数置0，将参与                     运算的运算符置‘+’，然后得到两个‘有效’操作数和一个‘有效’运算符，之后等待下一个运算数和运算符的输入……如此循环，直至遇到‘=’，给出                     最终结果。
         
         用户使用————可以任意次数地以任何顺序输入或者删除任何除‘=’外的字符；一旦输入‘=’，屏幕则将给出计算结果，如果输入的式子无法计算或者及计算结果为                     无穷大，那么屏幕将会显示相应的错误提示。对于需要连续运算的情况，提供了Answer键使用户能够按下此键来输入上一次运算结果。
         
         文件结构————需要说明的总共有4个类，从MVC角度来说，首先Viewcontroller 和 wiew方面就只有系统模板‘SINGLE VIEW’自带的Viewcontroller这个                       UIViewController的子类，我对于GUI的使用还比较陌生，所以仅仅是从库里面拖了一些buttons和一个label来组成storyboard，这个                           Viewcontroller就是这个single view的delegate。然后Model方面，一共有三个类，一个是Inspector，负责对由View的delegate送过来的                     用户输入进行语法检测和校正，然后将错误信息或者处理后的多项式存到自己的errorString和inputAfterCheck两个只读属性里面；另外两个                     类是Calculator和UnitCal，前者负责对一个语法没有问题的多项式进行处理并分配计算任务给后者的实例，然后提供自getResult方法返回最                     终计算结果，后者实际上是一个只能进行不带括号的多项式的计算的基础计算器，负责执行前者指派的计算任务，可以说calss Calculator has                     a dependency on class UnitCal。
         
         control flow————用户输入字符并按下‘=’后，ViewController将用户的输入原封不动地先传给Inspector进行语法检测和校正，如果有错误，Inspector将                          自身isInputCorrect属性置false，然后将错误信息一并写入相关属性。如果只有可以接受的错误，那么对它                                                进行改善并存到属性里，如果没有错误那么处理过程中便不需要做改善，之后依然存到属性里。当Inspector处理完毕之后，                                    Viewcontroller通过Inspector的isInputCorrect属性来决定下一步的行动。如果用户的输入没有问题（isInputCorrect ==                                  ture），那么把处理好的inputAfterCheck传给Calculator进行计算，并将计算结果显示给用户。因为calculator使用unitcal来进行                          计算，而unitcal并不能应付带括号的多项式计算，于是每遇到一个括号，calculator就把这个括号里面的计算任务分配给一个新的                              unitcal，等这个括号结束的时候将这个unitcal的计算结果作为一个操作数传给上一个unitcal，使得上一个unitcal能够继续计算。
         
         不足之处————因为用户可能把整对括号里面的内容作为一个除数来输入，而Inspector是不知道括号里面究竟是不是0的，所以对于无穷大这个错误类型的判断                     是由Inpector和Calculator共同完成的，显然这一特征加强了两个类之间的联系，使得程序结构不够灵活。我一开始的思路就是利用语言本身的                     ERROR HANDLING机制来规避这种繁琐的粘连，但是由于自己基础知识欠缺，时间又不允许，所以不得已来手动处理。另外一个问题就是，没有考                     虑overfolow和underflow。
         未来改进————对于上面提到的不足，我首先想到的就是利用NSDecimalNumber所提供的面向对象的计算方法中相关的CalculationError来进行处理，这样能                     够同时解决除数为零以及因为溢出和数字过小导致的程序崩溃两大问题。对于拓展性，我想我所提供的计算方法仅限于本次作业的要求，如果要实                     现更加复杂的运算，那么Unitcal和calculator两个类一定需要重写，但是从程序结构上来看，‘用户输入--语法检测--进行计算’的模式我认为                     依然可行。首次设计的时候，我采用了动态计算的方法，也就是用户边输入程序边计算，但是考虑到需要对于用户的输入进行较大的限制（比如不                     能删除某些输入），我后来另起炉灶采用静态计算的方法，也就是等用户全部输入完毕之后再进行计算，这样一来使得用户拥有绝对的输入自由                     （比如连续输入两个小数点，等等），方便了在输入较长的多项式时能够随时自己纠正邻近的错误，但是同时不可忽视的一点是我没有为用户提供                     光标来是用户能够对输入的位置进行选择（比如返回到式子之前的某一段加一对括号，等等），使得先前提供的自由大打折扣，我希望能够在                       之后的学习中找到适合的解决办法。
